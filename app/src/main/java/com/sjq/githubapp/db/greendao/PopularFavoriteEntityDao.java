package com.sjq.githubapp.db.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.sjq.githubapp.javabean.PopularFavoriteEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "POPULAR_FAVORITE_ENTITY".
*/
public class PopularFavoriteEntityDao extends AbstractDao<PopularFavoriteEntity, Long> {

    public static final String TABLENAME = "POPULAR_FAVORITE_ENTITY";

    /**
     * Properties of entity PopularFavoriteEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property AutoId = new Property(0, Long.class, "autoId", true, "_id");
        public final static Property PopularId = new Property(1, int.class, "popularId", false, "POPULAR_ID");
        public final static Property Full_name = new Property(2, String.class, "full_name", false, "FULL_NAME");
        public final static Property Description = new Property(3, String.class, "description", false, "DESCRIPTION");
        public final static Property Avatar_url = new Property(4, String.class, "avatar_url", false, "AVATAR_URL");
        public final static Property Stargazers_count = new Property(5, int.class, "stargazers_count", false, "STARGAZERS_COUNT");
    }


    public PopularFavoriteEntityDao(DaoConfig config) {
        super(config);
    }
    
    public PopularFavoriteEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"POPULAR_FAVORITE_ENTITY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: autoId
                "\"POPULAR_ID\" INTEGER NOT NULL ," + // 1: popularId
                "\"FULL_NAME\" TEXT," + // 2: full_name
                "\"DESCRIPTION\" TEXT," + // 3: description
                "\"AVATAR_URL\" TEXT," + // 4: avatar_url
                "\"STARGAZERS_COUNT\" INTEGER NOT NULL );"); // 5: stargazers_count
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"POPULAR_FAVORITE_ENTITY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, PopularFavoriteEntity entity) {
        stmt.clearBindings();
 
        Long autoId = entity.getAutoId();
        if (autoId != null) {
            stmt.bindLong(1, autoId);
        }
        stmt.bindLong(2, entity.getPopularId());
 
        String full_name = entity.getFull_name();
        if (full_name != null) {
            stmt.bindString(3, full_name);
        }
 
        String description = entity.getDescription();
        if (description != null) {
            stmt.bindString(4, description);
        }
 
        String avatar_url = entity.getAvatar_url();
        if (avatar_url != null) {
            stmt.bindString(5, avatar_url);
        }
        stmt.bindLong(6, entity.getStargazers_count());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, PopularFavoriteEntity entity) {
        stmt.clearBindings();
 
        Long autoId = entity.getAutoId();
        if (autoId != null) {
            stmt.bindLong(1, autoId);
        }
        stmt.bindLong(2, entity.getPopularId());
 
        String full_name = entity.getFull_name();
        if (full_name != null) {
            stmt.bindString(3, full_name);
        }
 
        String description = entity.getDescription();
        if (description != null) {
            stmt.bindString(4, description);
        }
 
        String avatar_url = entity.getAvatar_url();
        if (avatar_url != null) {
            stmt.bindString(5, avatar_url);
        }
        stmt.bindLong(6, entity.getStargazers_count());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public PopularFavoriteEntity readEntity(Cursor cursor, int offset) {
        PopularFavoriteEntity entity = new PopularFavoriteEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // autoId
            cursor.getInt(offset + 1), // popularId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // full_name
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // description
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // avatar_url
            cursor.getInt(offset + 5) // stargazers_count
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, PopularFavoriteEntity entity, int offset) {
        entity.setAutoId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setPopularId(cursor.getInt(offset + 1));
        entity.setFull_name(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setDescription(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setAvatar_url(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setStargazers_count(cursor.getInt(offset + 5));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(PopularFavoriteEntity entity, long rowId) {
        entity.setAutoId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(PopularFavoriteEntity entity) {
        if(entity != null) {
            return entity.getAutoId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(PopularFavoriteEntity entity) {
        return entity.getAutoId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
