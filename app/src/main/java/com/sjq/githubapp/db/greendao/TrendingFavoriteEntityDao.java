package com.sjq.githubapp.db.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.sjq.githubapp.javabean.TrendingFavoriteEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "TRENDING_FAVORITE_ENTITY".
*/
public class TrendingFavoriteEntityDao extends AbstractDao<TrendingFavoriteEntity, Long> {

    public static final String TABLENAME = "TRENDING_FAVORITE_ENTITY";

    /**
     * Properties of entity TrendingFavoriteEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property AutoId = new Property(0, Long.class, "autoId", true, "_id");
        public final static Property TrendingId = new Property(1, int.class, "trendingId", false, "TRENDING_ID");
    }


    public TrendingFavoriteEntityDao(DaoConfig config) {
        super(config);
    }
    
    public TrendingFavoriteEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"TRENDING_FAVORITE_ENTITY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: autoId
                "\"TRENDING_ID\" INTEGER NOT NULL );"); // 1: trendingId
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"TRENDING_FAVORITE_ENTITY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, TrendingFavoriteEntity entity) {
        stmt.clearBindings();
 
        Long autoId = entity.getAutoId();
        if (autoId != null) {
            stmt.bindLong(1, autoId);
        }
        stmt.bindLong(2, entity.getTrendingId());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, TrendingFavoriteEntity entity) {
        stmt.clearBindings();
 
        Long autoId = entity.getAutoId();
        if (autoId != null) {
            stmt.bindLong(1, autoId);
        }
        stmt.bindLong(2, entity.getTrendingId());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public TrendingFavoriteEntity readEntity(Cursor cursor, int offset) {
        TrendingFavoriteEntity entity = new TrendingFavoriteEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // autoId
            cursor.getInt(offset + 1) // trendingId
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, TrendingFavoriteEntity entity, int offset) {
        entity.setAutoId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTrendingId(cursor.getInt(offset + 1));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(TrendingFavoriteEntity entity, long rowId) {
        entity.setAutoId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(TrendingFavoriteEntity entity) {
        if(entity != null) {
            return entity.getAutoId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(TrendingFavoriteEntity entity) {
        return entity.getAutoId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
